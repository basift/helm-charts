apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.cronJob.name }}
spec:
  schedule: {{ .Values.cronJob.schedule | quote }}  
  suspend: {{ .Values.cronJob.suspend }}
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: {{ .Release.Name }}-role-sa
          containers:
          - name: kured-reboot
            image: {{ .Values.cronJob.image.repository }}:{{ .Values.cronJob.image.tag }}
            imagePullPolicy: IfNotPresent
            resources:
              requests:
                cpu: {{ .Values.cronJob.resources.requests.cpu }}
                memory: {{ .Values.cronJob.resources.requests.memory }}
              limits:
                cpu: {{ .Values.cronJob.resources.limits.cpu }}
                memory: {{ .Values.cronJob.resources.limits.memory }}
            env:
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NAMESPACE
              value: {{ .Release.Namespace }}  
            - name: ANNOTATION
              value: {{ .Values.cronJob.annotation }}
            - name: CHECK_REBOOT_REQUIRED
              value: "{{ .Values.cronJob.checkRebootRequired }}"
            command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              
              # Function to check if a reboot is in progress
              function reboot_in_progress() {
                kubectl get nodes -o json | jq -e '.items[] | select(.metadata.annotations."'"$ANNOTATION"'" != null) | .metadata.name' > /dev/null
              }
              
              # Function to trigger a reboot on a node
              function trigger_reboot() {
                local node=$1
                echo "Triggering reboot on node $node"
                local debugger_pod=$(kubectl -n $NAMESPACE debug node/$node -it --image=busybox -- chroot /host touch /var/run/reboot-required 2>/dev/null | grep -oP '(?<=Creating debugging pod )[^\s]+')
                echo "Debugger pod $debugger_pod created"
                kubectl -n $NAMESPACE delete pod $debugger_pod 2>/dev/null
              }
              
              # Function to wait for a node to start rebooting
              function wait_for_reboot_start() {
                local node=$1
                echo "Waiting for node $node to start rebooting"
                sleep {{ .Values.cronJob.rebootStartDelay }}
                local annotation=$(kubectl get node $node -o json | jq -r '.metadata.annotations."'"$ANNOTATION"'"') 2>/dev/null
                while [ "$annotation" != "null" ] && [ -n "$annotation" ]; do
                  sleep 10
                  annotation=$(kubectl get node $node -o json | jq -r '.metadata.annotations."'"$ANNOTATION"'"') 2>/dev/null
                done
              }

              # Function to wait for a node to be ready after reboot  
              function wait_for_node_ready() {
                local node=$1
                echo "Waiting for node $node to be ready again"
                kubectl wait --for=condition=Ready node/$node --timeout={{ .Values.cronJob.nodeReadyTimeout }}
              }
              
              # Main script
              echo "I'm running on node $MY_NODE_NAME"

              if reboot_in_progress; then
                echo "Another reboot is in progress"
                exit 1
              else  
                for node in $(kubectl get nodes -o jsonpath='{.items[*].metadata.name}'); do
                  if [ "$node" == "$MY_NODE_NAME" ]; then
                    continue
                  else
                    if [ "$CHECK_REBOOT_REQUIRED" == "true" ]; then
                      if kubectl get node $node -o jsonpath='{.status.conditions[?(@.type=="RebootRequired")].status}' | grep True > /dev/null; then 
                        trigger_reboot $node
                        wait_for_reboot_start $node
                        wait_for_node_ready $node
                        echo "Reboot completed for node $node"
                        echo "Waiting {{ .Values.cronJob.nodeDelay }} seconds before proceeding to next node"  
                        sleep {{ .Values.cronJob.nodeDelay }}
                      else
                        echo "Node $node does not require a reboot"  
                      fi
                    else
                      trigger_reboot $node
                      wait_for_reboot_start $node
                      wait_for_node_ready $node
                      echo "Reboot completed for node $node"
                      echo "Waiting {{ .Values.cronJob.nodeDelay }} seconds before proceeding to next node"  
                      sleep {{ .Values.cronJob.nodeDelay }}
                    fi
                  fi  
                done
                  
                if [ "$CHECK_REBOOT_REQUIRED" == "true" ]; then
                  if kubectl get node $MY_NODE_NAME -o jsonpath='{.status.conditions[?(@.type=="RebootRequired")].status}' | grep True > /dev/null; then
                    trigger_reboot $MY_NODE_NAME
                    echo "Reboot completed for node $MY_NODE_NAME"
                    echo "That's it" 
                  else
                    echo "Node $MY_NODE_NAME does not require a reboot"
                  fi
                else
                  trigger_reboot $MY_NODE_NAME
                  echo "Reboot completed for node $MY_NODE_NAME"
                  echo "That's it" 
                fi
              fi
          restartPolicy: Never